//
//  SignInViewController.m
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-objc v0.20
//
//
#import <Foundation/Foundation.h>
#import "MainViewController.h"
#import "SignInViewController.h"
#import <AWSCore/AWSCore.h>
#import <AWSMobileHubHelper/AWSMobileHubHelper.h>
#import <AWSCognitoUserPoolsSignIn/AWSCognitoUserPoolsSignIn.h>
#import <AWSCognitoIdentityProvider/AWSCognitoIdentityProvider.h>
#import "UserPoolMFAViewController.h"
#import "UserPoolSignUpViewController.h"
#import "UserPoolForgotPasswordViewController.h"
#import "FormTableCell.h"
#import "TableInputCell.h"
#import "UserPoolsUIHelper.h"
#import "FormTableDelegate.h"

static NSString *LOG_TAG;

@interface SignInViewController () <AWSCognitoIdentityInteractiveAuthenticationDelegate, AWSCognitoIdentityPasswordAuthentication, AWSCognitoUserPoolsSignInHandler>
@property (strong, atomic) FormTableCell *passwordRow;
@property (strong, atomic) FormTableCell *userNameRow;
@property (strong, atomic) FormTableDelegate *tableDelegate;

@property (nonatomic, strong) AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails*>* passwordAuthenticationCompletion;
@property(nonatomic,strong) UserPoolMFAViewController* mfaViewController;

@end

@implementation SignInViewController

static NSString *SMALL_IMAGE_NAME;
static NSString *BIG_IMAGE_NAME;

@synthesize canCancel;

+ (void)initialize {
    [super initialize];
    LOG_TAG = NSStringFromClass(self);
    SMALL_IMAGE_NAME = @"logo-aws-small";
    BIG_IMAGE_NAME = @"logo-aws-big";
}

- (id)initWithCoder:(NSCoder *)decoder {
    if (self  = [super initWithCoder:decoder]) {
        canCancel = YES;
    }
    return self;
}


#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"%@: Sign-In Loading.", LOG_TAG);
    // set up the navigation controller
    [self setUpNavigationController];
    // set up the logo in image view
    [self setUpLogo];
    // set up username and password UI if user pools enabled
    [self setUpUserPoolsUI];
    // set up background
    [self setUpBackground];
    // set up facebook button if enabled
    [self setUpFacebookButton];
    // set up google button if enabled
    [self setUpGoogleButton];
}

#pragma mark - Utility Methods

- (void)handleLoginWithSignInProvider:(id<AWSSignInProvider>)signInProvider {
    [[AWSSignInManager sharedInstance]
        loginWithSignInProviderKey:[signInProvider identityProviderName]
              completionHandler:^(id result, AWSIdentityManagerAuthState authState, NSError *error) {
                                    if (!error) {
                                        dispatch_async(dispatch_get_main_queue(), ^{
                                                [self dismissViewControllerAnimated:YES
                                                                        completion:nil];
                                            if (self.didCompleteSignIn) {
                                                self.didCompleteSignIn(YES);
                                            }
                                        });
                                    }
                                    NSLog(@"result = %@, error = %@", result, error);
                                }];
}

- (void)setUpUserPoolsUI {
        self.passwordRow = [[FormTableCell alloc] initWithPlaceHolder:@"Password"
                                                                 type:InputTypePassword];
        self.userNameRow = [[FormTableCell alloc] initWithPlaceHolder:@"User Name"
                                                                 type:InputTypeText];
        self.tableDelegate = [FormTableDelegate new];
        [self.tableDelegate addCell:self.userNameRow];
        [self.tableDelegate addCell:self.passwordRow];
        self.tableView.delegate = self.tableDelegate;
        self.tableView.dataSource = self.tableDelegate;
        [self.tableView reloadData];
        [UserPoolsUIHelper setUpFormShadowForView:self.tableFormView];
        [self setUpResponders];
    [self.orSignInWithLabel removeFromSuperview];
}

- (void)setUpLogo {
    self.logoView.contentMode = UIViewContentModeCenter;
    self.logoView.image = [UIImage imageNamed:BIG_IMAGE_NAME];
    self.logoViewHeight.constant = 230;
    [self.logoView setNeedsLayout];
    [self.view setNeedsLayout];
    [self.view layoutIfNeeded];
}

- (void)setUpBackground {
    self.view.backgroundColor = [UIColor whiteColor];
        
    UIImageView *backgroundImageView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.tableFormView.center.y)];
    backgroundImageView.backgroundColor = [UIColor darkGrayColor];
    backgroundImageView.autoresizingMask = UIViewAutoresizingFlexibleWidth;
    [self.view insertSubview:backgroundImageView atIndex:0];
}

- (void)setUpResponders {
    [self.signUpButton addTarget:self
                          action:@selector(handleUserPoolSignUp)
                forControlEvents:UIControlEventTouchUpInside];
    [self.signInButton addTarget:self
                          action:@selector(handleUserPoolSignIn)
                forControlEvents:UIControlEventTouchUpInside];
    [self.forgotPasswordButton addTarget:self
                                  action:@selector(handleUserPoolForgotPassword)
                        forControlEvents:UIControlEventTouchUpInside];
}

- (void)setUpNavigationController {
    // set up title bar
    self.navigationController.navigationBar.topItem.title = @"Sign In";
    if (self.canCancel) {
        UIBarButtonItem *cancelButton = [[UIBarButtonItem alloc] initWithTitle:@"Cancel"
                                                                         style:UIBarButtonItemStylePlain
                                                                        target:self
                                                                        action:@selector(barButtonClosePressed)];
        cancelButton.tintColor = [UIColor whiteColor];
        self.navigationController.navigationBar.topItem.leftBarButtonItem = cancelButton;
    }
    self.navigationController.navigationBar.titleTextAttributes = @{
                                                                    NSForegroundColorAttributeName: [UIColor whiteColor],
                                                                    };
    self.navigationController.navigationBar.translucent = NO;
    self.navigationController.navigationBar.barTintColor = [UIColor darkGrayColor];
    self.navigationController.navigationBar.tintColor = [UIColor whiteColor];
    
}

- (void)barButtonClosePressed {
    [self dismissViewControllerAnimated:YES completion:nil];
    if (self.didCompleteSignIn) {
        self.didCompleteSignIn(NO);
    }
}

- (void)setUpFacebookButton {
    // Hide facebook button
    [self.facebookButton removeFromSuperview];
}
    
- (void)setUpGoogleButton {
    // Hide google button
    [self.googleButton removeFromSuperview];
    
}

- (void)showErrorDialog:(NSString *)loginProviderName withError:(const NSError *)error {
    NSLog(@"%@: %@ failed to sign in w/ error: %@", LOG_TAG, loginProviderName, error);

    UIAlertController *alertController =
        [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Sign-in Provider Sign-In Error",
                                                                      @"Sign-in error for sign-in failure.")
                                            message:NSLocalizedString(@"%@ failed to sign in w/ error: %@",
                                                                      @"Sign-in message structure for sign-in failure.")
                                     preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction =
        [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel",
                                                         @"Label to cancel sign-in failure.")
                                 style:UIAlertActionStyleCancel
                                handler:nil];
    [alertController addAction:doneAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

#pragma mark - IBActions

//set up password authentication ui to retrieve username and password from the user
-(id<AWSCognitoIdentityPasswordAuthentication>) startPasswordAuthentication {
    return self;
}

-(id<AWSCognitoIdentityMultiFactorAuthentication>) startMultiFactorAuthentication {
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserPools" bundle:nil];
    UserPoolMFAViewController *viewController = (UserPoolMFAViewController *)[storyboard instantiateViewControllerWithIdentifier:@"MFA"];
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.navigationController pushViewController:viewController
                                                 animated:YES];
    });
    
    return viewController;
}

-(void) getPasswordAuthenticationDetails: (AWSCognitoIdentityPasswordAuthenticationInput *) authenticationInput  passwordAuthenticationCompletionSource: (AWSTaskCompletionSource<AWSCognitoIdentityPasswordAuthenticationDetails *> *) passwordAuthenticationCompletionSource {
    self.passwordAuthenticationCompletion = passwordAuthenticationCompletionSource;
}

-(void) didCompletePasswordAuthenticationStepWithError:(NSError*) error {
    if(error){
        dispatch_async(dispatch_get_main_queue(), ^{
            
            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:error.userInfo[@"__type"]
                                                                                     message:error.userInfo[@"message"]
                                                                              preferredStyle:UIAlertControllerStyleAlert];
            UIAlertAction *ok = [UIAlertAction actionWithTitle:@"Retry" style:UIAlertActionStyleDefault handler:nil];
            [alertController addAction:ok];
            [self presentViewController:alertController
                               animated:YES
                             completion:nil];
        });
    }
}

- (void)handleUserPoolSignIn {
    [[AWSCognitoUserPoolsSignInProvider sharedInstance] setInteractiveAuthDelegate:self];
    [self handleLoginWithSignInProvider:[AWSCognitoUserPoolsSignInProvider sharedInstance]];
}

- (void)handleUserPoolSignInFlowStart {
    self.passwordAuthenticationCompletion.result = [[AWSCognitoIdentityPasswordAuthenticationDetails alloc]
                                                    initWithUsername:[self.tableDelegate getValueForCell:self.userNameRow forTableView:self.tableView]
                                                    password:[self.tableDelegate getValueForCell:self.passwordRow forTableView:self.tableView]];
}

- (void)handleUserPoolSignUp {
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserPools" bundle:nil];
    UIViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:@"SignUp"];
    [self.navigationController pushViewController:viewController
                                         animated:YES];
}

- (void)handleUserPoolForgotPassword {
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserPools" bundle:nil];
    UIViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:@"ForgotPassword"];
    
    [self.navigationController pushViewController:viewController
                                         animated:YES];
}

@end
